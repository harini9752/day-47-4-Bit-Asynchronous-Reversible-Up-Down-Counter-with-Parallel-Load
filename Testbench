module tb_four_bit_async_reversible_up_down_counter;

  reg clk, rst_n, up_down, parallel_load;
  reg [3:0] parallel_input;
  wire [3:0] count;

  four_bit_async_reversible_up_down_counter uut (
    .clk(clk),
    .rst_n(rst_n),
    .up_down(up_down),
    .parallel_load(parallel_load),
    .parallel_input(parallel_input),
    .count(count)
  );

  initial begin
    // Test 1: Counter without reset, counting up
    clk = 0;
    rst_n = 1;
    up_down = 1;
    parallel_load = 0;
    #10 $display("Time=%0t clk=%b rst_n=%b up_down=%b parallel_load=%b parallel_input=%b count=%b", $time, clk, rst_n, up_down, parallel_load, parallel_input, count);

    // Test 2: Counter with parallel load
    parallel_load = 1;
    parallel_input = 4'b1101;
    #10 $display("Time=%0t clk=%b rst_n=%b up_down=%b parallel_load=%b parallel_input=%b count=%b", $time, clk, rst_n, up_down, parallel_load, parallel_input, count);

    // Test 3: Counter after parallel load, counting down
    parallel_load = 0;
    up_down = 0;
    #10 $display("Time=%0t clk=%b rst_n=%b up_down=%b parallel_load=%b parallel_input=%b count=%b", $time, clk, rst_n, up_down, parallel_load, parallel_input, count);

    // Add more test cases as needed

    $finish;
  end

  always #5 clk = ~clk;

endmodule
